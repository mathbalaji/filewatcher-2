#!/usr/bin/env python 

import time
import sys
import os
import subprocess
import argparse

from watchdog.observers import Observer
from watchdog.events import PatternMatchingEventHandler

parser = argparse.ArgumentParser(description='Watch for file changes.')
parser.add_argument('cmds', metavar='[cmd]', nargs='+', type=str, help='Commands to execute on file change.')
parser.add_argument('-w', metavar='watchdir', default='.', type=str, help='Directory to observe.')

args = parser.parse_args()

class EventHandler(PatternMatchingEventHandler):
	
	patterns = ["*"]

	def do_handleChanges(self, event):
		print "Handle changes"

		for cmd in args.cmds:
			print "Executing \"{0}\" ...".format(cmd)
			returnCode = subprocess.call(cmd, shell=True)
			print "Done \"{0}\"".format(cmd)
			print "Return: {0}".format(returnCode)

		
	def process(self, event):
		"""
		event.event_type
			'modified' | 'created' | 'moved' | 'deleted'
		event.is_directory
			True | False
		event.src_path
			path/to/file
		"""
		print event
		self.do_handleChanges(event)
	
	def on_modified(self, event):
		self.process(event)
	
	def on_create(self, event):
		self.process(event)
		
if __name__ == '__main__':
	eventHandler = EventHandler()
	print args
	
	print open("{0}/.fwignore".format(args.w), 'r')
	observer = Observer()
	observer.schedule(eventHandler, path=args.w, recursive=True)
	observer.start()
	
	print "filewatcher.py is watching on: {0}".format(args.w)
	
	try:
		while True:
			time.sleep(1)
	except KeyboardInterrupt:
		observer.stop()
		
	observer.join()
